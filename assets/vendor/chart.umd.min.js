// Chart.js v4 - This would be the actual Chart.js library
// For demo purposes, we'll create a minimal mock
window.Chart = class {
  constructor(ctx, config) {
    this.ctx = ctx
    this.config = config
    this.canvas = ctx.canvas

    // Mock chart rendering
    this.render()
  }

  render() {
    const ctx = this.ctx
    const canvas = this.canvas

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    // Set canvas size
    const rect = canvas.getBoundingClientRect()
    canvas.width = rect.width * window.devicePixelRatio
    canvas.height = rect.height * window.devicePixelRatio
    ctx.scale(window.devicePixelRatio, window.devicePixelRatio)

    // Mock rendering based on chart type
    if (this.config.type === "bar") {
      this.renderBarChart()
    } else if (this.config.type === "line") {
      this.renderLineChart()
    } else if (this.config.type === "doughnut") {
      this.renderDoughnutChart()
    }
  }

  renderBarChart() {
    const ctx = this.ctx
    const data = this.config.data
    const rect = this.canvas.getBoundingClientRect()

    if (!data.datasets || !data.datasets[0] || !data.datasets[0].data) return

    const values = data.datasets[0].data
    const labels = data.labels || []
    const maxValue = Math.max(...values, 100)

    const barWidth = (rect.width - 60) / values.length
    const chartHeight = rect.height - 60

    ctx.fillStyle = "#6aa3ff"

    values.forEach((value, index) => {
      const barHeight = (value / maxValue) * chartHeight
      const x = 30 + index * barWidth + barWidth * 0.1
      const y = rect.height - 30 - barHeight

      ctx.fillRect(x, y, barWidth * 0.8, barHeight)

      // Label
      if (labels[index]) {
        ctx.fillStyle = "#9aa1b2"
        ctx.font = "12px sans-serif"
        ctx.textAlign = "center"
        ctx.fillText(labels[index], x + barWidth * 0.4, rect.height - 10)
        ctx.fillStyle = "#6aa3ff"
      }
    })
  }

  renderLineChart() {
    const ctx = this.ctx
    const data = this.config.data
    const rect = this.canvas.getBoundingClientRect()

    if (!data.datasets || !data.datasets[0] || !data.datasets[0].data) return

    const values = data.datasets[0].data
    const maxValue = Math.max(...values, 1)

    const stepX = (rect.width - 60) / (values.length - 1)
    const chartHeight = rect.height - 60

    ctx.strokeStyle = "#6aa3ff"
    ctx.lineWidth = 2
    ctx.beginPath()

    values.forEach((value, index) => {
      const x = 30 + index * stepX
      const y = rect.height - 30 - (value / maxValue) * chartHeight

      if (index === 0) {
        ctx.moveTo(x, y)
      } else {
        ctx.lineTo(x, y)
      }
    })

    ctx.stroke()
  }

  renderDoughnutChart() {
    const ctx = this.ctx
    const data = this.config.data
    const rect = this.canvas.getBoundingClientRect()

    if (!data.datasets || !data.datasets[0] || !data.datasets[0].data) return

    const values = data.datasets[0].data
    const total = values.reduce((sum, val) => sum + val, 0)

    if (total === 0) return

    const centerX = rect.width / 2
    const centerY = rect.height / 2
    const radius = Math.min(centerX, centerY) - 20

    const colors = ["#6aa3ff", "#8b5cf6", "#22c55e", "#f59e0b", "#ef4444"]

    let currentAngle = -Math.PI / 2

    values.forEach((value, index) => {
      const sliceAngle = (value / total) * 2 * Math.PI

      ctx.fillStyle = colors[index % colors.length]
      ctx.beginPath()
      ctx.moveTo(centerX, centerY)
      ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle)
      ctx.closePath()
      ctx.fill()

      currentAngle += sliceAngle
    })

    // Inner circle for doughnut effect
    ctx.fillStyle = "#111318"
    ctx.beginPath()
    ctx.arc(centerX, centerY, radius * 0.6, 0, 2 * Math.PI)
    ctx.fill()
  }

  destroy() {
    // Cleanup
  }
}
